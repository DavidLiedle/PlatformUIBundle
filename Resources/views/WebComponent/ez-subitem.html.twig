<link rel="import" href="{{ asset( 'bundles/ezplatformui/vendors/polymer/polymer-element.html' ) }}">
<link rel="import" href="{{ path( 'webcomponent_yui_app' ) }}">

<style>
ez-subitem {
    display: block;
    width: 100%;
    margin: 1em 0;
}
</style>

<script>
class eZSubitem extends Polymer.Element {
    static get is() {
        return 'ez-subitem';
    }

    static get config() {
        return {
            properties: {
                "parentLocationId": {
                    type: String,
                },
            },
        };
    }

    constructor() {
        super();
        console.log('ez-subitem constructor', arguments, this);
    }

    connectedCallback() {
        super.connectedCallback();
        this._trackYUIAppReady();
    }

    _trackYUIAppReady() {
        if ( eZ.YUI ) {
            return this._createSubitemComponent();
        }
        document.addEventListener('ez:yui-app:ready', this._createSubitemComponent.bind(this));
    }

    _createSubitemComponent() {
        const app = eZ.YUI.app;
        const Y = eZ.YUI.Y;
        const params = {
            id: this.parentLocationId,
            languageCode: 'eng-GB'
        };
        const done = function (err, viewService, view) {
            this.innerHTML = '';
            if ( err ) {
                this.innerHTML = 'An error occurred';
                return;
            }
            this.appendChild(view.get('container').getDOMNode());
            view.set('active', true);

            // using the shadow DOM is another option. It allows to somehow
            // hide the internal of the component but on the other hand
            // it makes styling harder as we have to add the CSS in the component
            // itself.
            //let shadowRoot = this.attachShadow({mode: 'open'});
            //shadowRoot.appendChild(view.get('container').getDOMNode());
        }.bind(this);

        app.renderView(
            Y.eZ.SubitemBoxView,
            // LocationViewViewService works for SubitemBoxView but it does too
            // many things for it, mainly it loads the path of the Location
            // while it's not actually needed.
            // Another reason to have an another view service would be to change
            // the component to receive a Location id (not the REST id), so the
            // view service would have to load the Location by this id.
            Y.eZ.LocationViewViewService,
            params,
            done
        );
    }

    disconnectedCallback() {
        super.disconnectedCallback();
    }
}

customElements.define(eZSubitem.is, eZSubitem);
</script>
