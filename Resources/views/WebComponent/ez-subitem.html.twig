<link rel="import" href="{{ asset( 'bundles/ezplatformui/vendors/polymer/polymer-element.html' ) }}">
<link rel="import" href="{{ path( 'webcomponent_yui_app' ) }}">

<style>
ez-subitem {
    display: block;
    width: 100%;
    margin: 1em 0;
}
</style>

<script>
class eZSubitem extends Polymer.Element {
    static get is() {
        return 'ez-subitem';
    }

    static get config() {
        return {
            properties: {
                "parentLocationId": {
                    type: String,
                },
            },
        };
    }

    constructor() {
        super();
        console.log('ez-subitem constructor', arguments, this);
    }

    connectedCallback() {
        super.connectedCallback();
        this._trackYUIAppReady();
    }

    _trackYUIAppReady() {
        if ( eZ.YUI ) {
            return this._createSubitemComponent();
        }
        document.addEventListener('ez:yui-app:ready', this._createSubitemComponent.bind(this));
    }

    _createSubitemComponent() {
        const app = eZ.YUI.app;
        const Y = eZ.YUI.Y;

        // this should probably be done in a custom plugin for the app
        // or directly in the app itself
        // this would also avoid exposing the Y object
        app.views.subitemBoxView = {type: Y.eZ.SubitemBoxView};
        app.route({
            name: 'subitemList',
            path: '/subitem/:id/:languageCode',
            service: Y.eZ.LocationViewViewService,
            view: 'subitemBoxView',
            callbacks: ['handleMainView']
        });
        app.set('transitions', false);
        app.onceAfter('activeViewChange', function () {
            let shadowRoot = this.attachShadow({mode: 'closed'});
            shadowRoot.appendChild(app.get('activeView').get('container').getDOMNode());
            //this.innerHTML = '';
            //this.appendChild(app.get('activeView').get('container').getDOMNode());
        }.bind(this));
        app.internalNavigateTo('subitemList', {
            id: this.parentLocationId,
            languageCode: 'eng-GB'
        });
    }

    disconnectedCallback() {
        super.disconnectedCallback();
    }
}

customElements.define(eZSubitem.is, eZSubitem);
</script>
