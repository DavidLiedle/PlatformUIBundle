<h1>{{ location.contentInfo.name }} (Location #{{ location.id }})</h1>

<div>
    <button class="run-udw">Run UDW (Allows only container to be picked)</button>
    <script>
(function () {
    const button = document.querySelector('.run-udw');

    button.addEventListener('click', function (e) {
        const event = new CustomEvent('contentDiscover', {
            detail: {
                oncancel: function () {
                    console.log('CANCEL');
                },
                onconfirm: function (selection) {
                    const result = document.createElement('p');

                    result.innerHTML = `${selection.location.contentInfo.name}
                        (Content id #${selection.content.contentId}) in Location
                        #${selection.location.locationId}
                        (${selection.location.pathString}) was
                        chosen (Type ${selection.contentType.names['eng-GB']})`;

                    button.parentNode.insertBefore(result, button);
                },
                isSelectable: function (item) {
                    return item.contentType.isContainer;
                },
            },
            bubbles: true,
        });
        e.target.dispatchEvent(event);
    });
})();
    </script>
</div>

{# using the REST id Location for now to not have to find a cheap and easy way
 # to get the REST id for the regular Location id, but at the some point, this will
 # have to be changed. This involves developping a new view service.
 # see app.renderView() call in WebComponent/ez-subitem.html.twig
 #}
<ez-subitem parent-location-id="{{ path( 'ezpublish_rest_loadLocation', {'locationPath': location.pathString|trim('/')} ) }}">
    Loading subitems...
</ez-subitem>
