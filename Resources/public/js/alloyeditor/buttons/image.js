/*
 * Copyright (C) eZ Systems AS. All rights reserved.
 * For full copyright and license information view LICENSE file distributed with this source code.
 */
/* global CKEDITOR */
// **NOTICE:**
// THIS IS AN AUTO-GENERATED FILE
// DO YOUR MODIFICATIONS IN THE CORRESPONDING .jsx FILE
// AND REGENERATE IT WITH: grunt jsx
// END OF NOTICE
YUI.add('ez-alloyeditor-button-image', function (Y) {
    "use strict";

    var AlloyEditor = Y.eZ.AlloyEditor,
        React = Y.eZ.React,
        ButtonImage,
        getImageField = function (contentType, content) {
            var imageIdentifier = contentType.getFieldDefinitionIdentifiers('ezimage');

            return content.get('fields')[imageIdentifier[0]];
        };

    /**
     * The ButtonImage component represents a button to add an image in the
     * editor.
     *
     * @uses AlloyEditor.ButtonCommand
     * @uses AlloyEditor.ButtonStateClasses
     * @uses eZ.AlloyEditorToolbarConfig.ButtonImageDiscoverContent
     *
     * @class eZ.AlloyEditor.ButtonImage
     */
    ButtonImage = React.createClass({displayName: "ButtonImage",
        mixins: [
            AlloyEditor.ButtonCommand,
            AlloyEditor.ButtonStateClasses,
            Y.eZ.AlloyEditorButton.ButtonEmbedDiscoverContent,
        ],

        statics: {
            key: 'ezimage'
        },

        getDefaultProps: function () {
            return {
                command: 'ezembed',
                modifiesSelection: true,
                udwTitle: "Select an image to embed",
                udwContentDiscoveredMethod: '_addImage',
                udwIsSelectable: function (contentStruct) {
                    var contentType = contentStruct.contentType,
                        content = contentStruct.content;

                    return !!(
                        contentType.hasFieldType('ezimage')
                        && getImageField(contentType, content).fieldValue
                    );
                },
                udwLoadContent: true,
            };
        },

        /**
         * Executes the command generated by the ezembed plugin and set the
         * correct value based on the choosen image.
         *
         * @method _addImage
         * @param {EventFacade} e the result of the choice in the UDW
         * @protected
         */
        _addImage: function (e) {
            this.execCommand();
            this._setContentInfo(e.selection.contentInfo);

            this._getWidget().setWidgetContent('Loading the image...');
            this._loadEmbedImage(e.selection);
        },

        /**
         * Creates the <img> element with the provided image variation.
         *
         * @method _insertImage
         * @protected
         * @param {false|CAPIError} imgVariation
         * @param {Object} imgVariation
         */
        _insertImage: function (error, imgVariation) {
            var img = new CKEDITOR.dom.element('img');

            // TODO error handling
            img.setAttribute('src', imgVariation.uri);
            this._getWidget().setWidgetContent(img);
        },

        /**
         * Loads the 'medium' variation of the embed image by firing the
         * `loadImageVariation`event.
         *
         * @method _loadEmbedImage
         * @param {Object} selection
         * @protected
         */
        _loadEmbedImage: function (selection) {
            var editor = this.props.editor.get('nativeEditor'),
                variation = 'medium'; // TODO make the default variation configurable

            this._getWidget().setConfig('size', variation);
            editor.fire('loadImageVariation', {
                variation: variation,
                field: getImageField(selection.contentType, selection.content),
                callback: this._insertImage,
            });
        },

        render: function () {
            var css = "ae-button ez-ae-labeled-button" + this.getStateClasses();

            return (
                React.createElement("button", {className: css, onClick: this._chooseContent, tabIndex: this.props.tabIndex}, 
                    React.createElement("span", {className: "ez-ae-icon ez-ae-icon-image ez-font-icon"}), 
                    React.createElement("p", {className: "ez-ae-label"}, "Image")
                )
            );
        },
    });

    AlloyEditor.Buttons[ButtonImage.key] = AlloyEditor.ButtonImage = ButtonImage;
});
